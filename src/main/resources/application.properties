# Application Name
spring.application.name=TweetBotTelegram

# Server Port Configuration
server.port=8081

# Database Configuration
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway Configuration
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.validate-on-migrate=true

# Logging Configuration
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.jdbc.core=TRACE
logging.level.com.egemen.TweetBotTelegram=DEBUG

# Docker and Flyway Configuration
spring.docker.compose.enabled=false
spring.flyway.baseline-version=1
spring.flyway.url=${DB_URL}
spring.flyway.user=${DB_USERNAME}
spring.flyway.password=${DB_PASSWORD}

# Logging Configuration
logging.level.org.flywaydb=DEBUG
logging.level.root=INFO
logging.level.com.ego.casino=DEBUG
logging.level.com.egemen.TweetBotTelegram=DEBUG

# Hibernate Configuration
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.validator.apply_to_ddl=false

# HikariCP Connection Pool Configuration
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.idle-timeout=180000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.leak-detection-threshold=30000
spring.datasource.hikari.register-mbeans=true
spring.datasource.hikari.pool-name=TweetBotHikariPool
spring.datasource.hikari.test-while-idle=true
spring.datasource.hikari.time-between-eviction-runs-millis=30000
spring.datasource.hikari.keepalive-time=180000
spring.datasource.hikari.validation-query=SELECT 1

# Transaction Management
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.connection.autocommit=false
spring.transaction.default-timeout=30

# Removed duplicate HikariCP settings

# Spring Cloud Config
spring.config.import=optional:configserver:
spring.cloud.config.enabled=false
spring.cloud.config.import-check.enabled=false

# Social Media Configuration
app.social-media.instagram.max-retries=3
app.social-media.instagram.post-delay=300000
app.social-media.instagram.batch-size=10
app.social-media.telegram.max-retries=3
app.social-media.telegram.post-delay=600000
app.social-media.telegram.batch-size=5
app.max-retries=3

# Scheduler Configuration
app.scheduler.fetch-news-rate=${APP_SCHEDULER_FETCH_NEWS_RATE:300000}
app.scheduler.post-rate=${APP_SCHEDULER_POST_RATE:600000}

# Security Configuration
app.security.rate-limit.requests=100
app.security.rate-limit.per-minutes=60

# Async Task Executor Configuration
spring.task.execution.pool.core-size=5
spring.task.execution.pool.max-size=10
spring.task.execution.pool.queue-capacity=25
spring.task.execution.shutdown.await-termination=true
spring.task.execution.shutdown.await-termination-period=60s

# Cache Configuration
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=500,expireAfterWrite=300s

# Actuator Configuration for Monitoring
management.endpoints.web.exposure.include=health,metrics,prometheus,circuitbreakers
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true
management.metrics.tags.application=${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# AWS Configuration
aws.access-key=${AWS_ACCESS_KEY}
aws.secret-key=${AWS_SECRET_KEY}
aws.region=${AWS_REGION}
aws.s3.bucket-name=${AWS_S3_BUCKET}

# API Keys
pexels.api-key=${PEXELS_API_KEY}
instagram.user-id=${INSTAGRAM_USERID}
instagram.access-token=${INSTAGRAM_ACCESS_TOKEN}
mediastack.api-key=${MEDIASTACK_API_KEY}
gemini.api-key=${GEMINI_API_KEY}
huggingface.api-key=${HUGGINGFACE_API_KEY}
telegram.bot.username=${TELEGRAM_BOT_USERNAME}
telegram.bot.token=${TELEGRAM_BOT_TOKEN}

# Instagram Configuration
instagram.username=${INSTAGRAM_USERNAME}
instagram.password=${INSTAGRAM_PASSWORD}

# Image Processing
image.processing.quality=0.85
image.processing.max-size=5242880

# Rate Limiting
instagram.rate.limit.capacity=25
instagram.rate.limit.interval=3600

# News Processing Configuration
news.processing.batch-size=5
news.processing.interval=300000

# AWS S3 Configuration
aws.s3.accessKey=${AWS_ACCESS_KEY}
aws.s3.secretKey=${AWS_SECRET_KEY}
aws.s3.bucketName=${AWS_S3_BUCKET}
aws.s3.region=${AWS_REGION}

# Add these Flyway placeholder configurations
spring.flyway.placeholders.TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
spring.flyway.placeholders.INSTAGRAM_USERNAME=${INSTAGRAM_USERNAME}
spring.flyway.placeholders.INSTAGRAM_PASSWORD=${INSTAGRAM_PASSWORD}
spring.flyway.placeholders.INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}
spring.flyway.placeholders.INSTAGRAM_USER_ID=${INSTAGRAM_USERID}
spring.flyway.placeholders.MEDIASTACK_API_KEY=${MEDIASTACK_API_KEY}
spring.flyway.placeholders.PEXELS_API_KEY=${PEXELS_API_KEY}
spring.flyway.placeholders.GEMINI_API_KEY=${GEMINI_API_KEY}